package com.npfk.tasks.strings.level.easy.chapter2;

import java.util.Scanner;

/** Hallöchen. Рядки, цикли та .charAt()
 *
 * Продовжуємо другу частину. Сподіваюсь, тебе не злякала попередня лекція:)
 *
 * Отже, як ти вже знаєш, рядок в програмуванні насправді є так званим масивом символів.
 *
 * Думаю, тобі вже відомо, що ти можеш отримати доступ до будь-якого елементу масива за допомогою індексу цього елемента.
 * Тобто
 *
 * char[] message = {'W', 'e', 'l', 'c', 'o', 'm', 'e'};
 * char symbol1 = message[0]; // W
 * char symbol2 = message[1]; // e
 * char symbol3 = message[2]; // l
 *
 * Або, можна взагалі вивести на екран це повідомленя за допомогою циклу for.
 * Таким чином ми пройдемось по всім елементам масиву
 *
 * for (int index = 0; index < message.length; index++)
 * {
 *     System.out.print(message[index] + " ");
 * }
 * System.out.println();
 *
 * Після того, як цикл завершить свою роботу, на екран буде виведено: "W e l c o m e "
 * Думаю, тобі це вже має бути відомим.
 *
 * І от таке запитаннячко виникає: Якщо String це по суті масив, то як нам отримать доступ до конкретного символу в рядку?
 *
 * Так, використати квадратні дужки ми не можемо, оскільки використання квадратних дужок призведе то створення масиву String[] елементів.
 *
 * Отже, як же нам це зробити? А розробники класу String створили вже такий метод, як charAt().
 *
 * Отже, давай сразу подивимось його практичне застосування.
 * Приклад перший:
 *
 * String letters = "AaBbCcDd";
 * Уяви, що це насправді масив char[] letters = {'A', 'a', 'B', 'b', 'C', 'c', 'D', 'd'};
 *
 * System.out.println(letters.charAt(0)); Ми звертаємось за індексом.
 * System.out.println(letters.charAt(1));
 * System.out.println(letters.charAt(2));
 * System.out.println(letters.charAt(5));
 *
 * На екран буде виведено: A
 *                         a
 *                         B
 *                         c
 *
 * Думаю, ти вже розумієш, що до чого. Завдяки charAt() ми можемо отримувати доступ до літери в конкретному місці.
 *
 * Давай подивимось на такий приклад:
 *
 * String name = "Anna";
 *
 * for (int i = 0; i < name.length(); i++)
 * {
 *     System.out.print(name.charAt(i) + " ");
 * }
 *
 * На екран буде виведено: "A n n a "
 *
 *
 * Давай тепер подивимось другий приклад, але дещо складніший.
 *
 *                  !!!!!!!!!!!!!ЦЕЙ КОД ОБОВ'ЯЗКОВИЙ ДО ЗАПУСКУ!!!!!!!!!!!!!
 *
 * char[] specialLetters = {'a', 'A', 'e', 'E', 'm', 'M'};
 * int specialLetterCounter = 0;
 *
 *                    // Вірш Емілі Дікінсон "Надія"
 * String sentence = "Hope is the thing with feathers\n " +
 *                   "That perches in the soul,\n " +
 *                   "And sings the tune without the words,\n " +
 *                   "And never stops at all,\n ";
 *
 *
 * for (int i = 0; i < specialLetters.length; i++)
 * {
 *     for (int j = 0; j < sentence.length(); j++)
 *     {
 *         if (sentence.charAt(j) == specialLetters[i])
 *         {
 *             specialLetterCounter++;
 *             System.out.println("Символ " + sentence.charAt(j) + " є спеціальним символом!");
 *             System.out.println("Це вже " + specialLetterCounter + "-й спеціальний символ.");
 *         }
 *     }
 * }
 * System.out.println("Спеціальних символів у вірші Емілі Дікінсон \"Надія\" " + specialLetterCounter);
 *                  !!!!!!!!!!!!!ЦЕЙ КОД ОБОВ'ЯЗКОВИЙ ДО ЗАПУСКУ!!!!!!!!!!!!!
 *
 * Ой-ой-ой... Щось занадто великий і не дуже зрозумілий код...
 *
 * Давай розбиратись. Якщо дуже коротко, то він просто рахує, чи є символ з рядку у масиву спеціальних символів.
 *
 * Ітак, давай почнемо рухатись зверху-вниз.
 *
 * Ми тут бачимо масив specialLetters, який зберігає в собі якісь символи. І цей масив нам потрібен лише для перевірки.
 * Тобто, чи є символи, які він в собі має, у рядку?
 *
 * Далі, у нас є змінна-рахівничка specialLetterCounter. Вона буде зберігати загальну кількість всіх спеціальних символів у рядку.
 *
 * А далі ми бачимо змінну sentence, яка тримає в собі вірш американської письменниці Емілі Дікінсон "Надія".
 *
 * А тепер починається найскладніше... Цикли. І причому, ти можеш побачити відразу 2 цикли... Йой...
 *
 * Давай спочатку розберемось, як працюють цикли в середині циклів... Значить, у нас є наступні цикли.
 *
 * for (int i = 0; i < specialLetters.length; i++)
 * {
 *     Ітак... Ми зараз знаходимось в середині циклу. Чудово.
 *
 *
 *     Отже. Перший цикл - він є головним циклом.
 *     Головний цикл завжди чекатиме, поки всі інші цикли, які він в собі тримає, закінчать свою роботу.
 *     І він зробить наступну ітерацію.
 *     Тобто, бачиш, змінна i = 0. Це перша ітерація. Далі буде друга ітерація
 *     тобто, змінна i = 1.
 *
 *     І всі внутрішні цикли з новою ітерацією знову почнуть свою роботу. А коли вони завершать свою роботу,
 *     головний цикл робить наступну ітерацію.
 *
 *
 *     for (int j = 0; j < sentence.length(); j++)
 *     {
 *          А це внутрішній, вторинний цикл. Він, за одну ітерацію ГОЛОВНОГО ЦИКЛУ виконає абсолютно всі свої ітерації.
 *          Тобто, він буде крутитись, поки його змінна j не буде перевищувати sentence.length().
 *          А коли він докрутиться, він передасть управління головному циклу, той зробить одну ітерацію,
 *          і передасть управління внутрішньому циклу. А потім головний цикл буде чекати,
 *          поки внутрішній докрутиться.
 *
 *          Щоб тобі було наглядніше, давай уявимо, що sentence.length() дорівнює 5-ти. Отже....
 *          i - змінна головного циклу, j - змінна внутрішнього циклу
 *          змінна j буде крутитись доти, поки не не стане дорівнювати 5, згідно умови циклу.
 *
 *
 *          i = 0; j = 0;
 *          i = 0; j = 1;
 *          i = 0; j = 2;
 *          i = 0; j = 3;
 *          i = 0; j = 4;
 *          i = 0; j = 5  ОПА! Внутрішній цикл виконав всі свої ітерації!!! Тепер він передає управління головному циклу...
 *
 *          Головний цикл робить одну ітерацію.... І знову передає управління внутрішньому циклу.
 *          i = 1; j = 0;
 *          i = 1; j = 1;
 *          i = 1; j = 2;
 *          i = 1; j = 3;
 *          i = 1; j = 4;
 *          i = 1; j = 5 ОПА! Знову  внутрішній цикл виконав всі свої ітерації... Тепер управління передається головному циклу...
 *
 *          Головний цикл робить ітерацію, і знову починається те ж саме...
 *          i = 2; j = 0;
 *          i = 2; j = 1;
 *          i = 2; j = 2;
 *          i = 2; j = 3;
 *          i = 2; j = 4;
 *          i = 2; j = 5 І знову... І так він все буде повторюватись, поки головний цикл не перестане відповідати умові.
 *     }
 *
 *     Думаю, вже більш-менш ти зрозумів, як "крутяться" ці цикли. Якщо важко - відпочинь. Або пошукай у Google;)
 *
 * }
 *
 *
 *     Ну, а поки твій мозок намагається "переварити" цю інформацію, невеличкий дисклеймер.
 *----------------------------------------------------------------------------------------------------------------------
 * Про Google-машину. Думаю, ти вже неодноразово помітив, що я тобі, як альтернативу, пропоную пошукати інформацію в гугл.
 *                    І насправді, цьому є пояснення. Працюючи програмістом, тобі доведеться досить часто шукати інформацію
 *                    по всьому Інтернету. І здебільшого - англійською. Це, вважай, професійна навичка.
 *                    І, у програмістів є таке правило. Коли вони зіткнулись з чимось складним, чимось досить незрозумілим...
 *                    Програмісти не лякаються. Ні, вони не кажуть "Ой, ну це складно! Я це не буду робити!!! Я цього не розумію"
 *                    Твоя задача - розібратись з тим, як воно працює. Цього від тебе очікує бізнес, твій клієнт, твій тімлід.
 *                    І запропонувати якомого ефективне, але максимально дешеве для витрат бізнесу, рішення чиєїсь проблеми.
 *                    Якщо програміст цього не зробить - він просто втратить свою роботу.
 *                    І тому, поклавши власні емоції у коробочку, на п'ятницю, програміст бере - і розбирається з тим, що він не розуміє.
 *                    І в цьому йому допомагає гугл. Скоріше за все, хтось вже стикався з такою проблемою, або десь в інтернеті є якийсь матеріал щодо цього.
 *                    І тому, варто про це пошукати в гугл. А чому б і ні?
 *
 *                    І я у цих лекціях даю вам учнівські приклади. Іноді я щось надмріно не пояснюю, щоб ви самі йшли
 *                    і шукали інформацію про це. Тим паче, що є просто безліч інтернет-сайтів, які розкажуть про це краще, аніж я.
 *                    Тому звикайте. Таке життя. Хочеш жити - крутись, а що ще робити?
 *----------------------------------------------------------------------------------------------------------------------
 *
 * Ну, добре, досить ліричного відступу. Продовжуємо;)
 *
 * Візьмемо оцю частину коду:
 *          if (sentence.charAt(j) == specialLetters[i])
 *          {
 *              specialLetterCounter++;
 *              System.out.println("Символ " + sentence.charAt(j) + " є спеціальним символом!");
 *              System.out.println("Це вже " + specialLetterCounter + "-й спеціальний символ.");
 *          }
 *  Якщо так подивитись, то тут, за одну ітерацію, переревіряються АБСОЛЮТНО Всі літери в нашому вірші, з одною літерою з масиву
 *  Тобто, буде ось так
 *  b; a;
 *  s; a;
 *  c; a;
 *  f; a;
 *  a; a;
 *  e; a;
 *  d; a;
 *
 * Якщо в поточний момент літера в рядку зівпала з літерою з масиву, то змінна-рахівничка враховує цей момент.
 * Тобто, як ти сам бачиш, внутрішній цикл буде крутитись повністю, перебирая абсолютно всі букви в цьому вірші.
 * А головний цикл буде брати лише букву з масиву, яка буде використовуватись для перевірки спеціальних символів.
 *
 * Тааааак... Це було досить складно, особливо коли ти ще не дуже знаєш мову програмування Java...;)
 *
 * 
 * Поки твій мозок ще не встиг остудитись, ось тобі подібна задачка;))
 * 
 * Задача 1:
 *
 * Програма запрошує у користувача на вивід будь-яке слово, рядок, текст, символ, цифру, тощо...
 * Вашим завданням буде відобразити це слово у вертикальному, посимвольному, виводі.
 * Наприклад:
 *
 * Користувач ввів: Alex
 * Користувач отримає:
 * A
 * l
 * e
 * x
 *
 * Користувач ввів: Hello, world!
 * Користувач отримає:
 * H
 * e
 * l
 * l
 * o
 * ,
 *
 * w
 * o
 * r
 * l
 * d
 * !
 *
 * Щоб інформацію на екран, вам допоможуть 2 методи:
 * System.out.println()
 * System.out.print()
 *
 * Щоб розділити рядок на символи, вам допоможе метод
 * charAt()
 *
 *
 *
 * Задача 2:
 *
 * Програма знову має зчитувати рядок з клавіатури, але. Виводити вона має з цього рядку лише ті символи, які діляться на 2.
 *
 * Наприклад:
 * Користувач ввів: Максим
 * Користувач отримає Мки.
 *
 * Дивись:
 *
 * М а к с и м
 * 0 1 2 3 4 5
 *
 * Як бачиш, 0, 2, 4 діляться на 2.
 *
 * А як зробити цю перевірку? Тобі допоможе остача від ділення, оператор %
 *
 * Якщо якесь число ділиться на 2, то остача від ділення буде 0.
 * 2 % 2 == 0;  так
 * 3 % 2 == 0;  ні
 *
 *
 * Задача 3. Задачка на уважність;)
 *
 * Користувач має вводити рядок. Виведи, будь ласка, перший символ цього рядку, і останній символ цього рядку.
 *
 * Програма має працювати з рядками будь-якої довготи!!!
 *
 * Користувач ввів: Привіт
 * Програма виведе: 1 - П, 2 - т
 *
 * Користувач ввів: Як справи?
 * Програми виведе: 1 - Я, 2 - ?
 *
 * Користувач ввів: Доброго дня. Мені потрібна допомога. Терміново.
 * Програма виведе: 1 - Д, 2 - .
 *
 *
 *

 */



public class Lesson4
{
    public static void main(String[] args)
    {
        // Напишіть свій код тут.
        Scanner sc = new Scanner(System.in);

        String anyName = sc.nextLine();

        for (int i = 0; i < anyName.length(); i++)
        {
            if (i % 2 == 0)
            {
                System.out.print(anyName.charAt(i));
            }
        }
    }
}
